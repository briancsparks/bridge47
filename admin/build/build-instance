#!/bin/bash -e

#
# For building, we just use the same subnet, etc as the machine doing the build.
# But the caller can override
#
#

my_mac0="$(curl -sS 'http://169.254.169.254/latest/meta-data/network/interfaces/macs/' | head -1)"
my_ip="$(curl -sS 'http://169.254.169.254/latest/meta-data/local-ipv4')"
my_classb="$(echo $my_ip | cut -d'.' -f2)"
my_subnet_id="$(curl -sS "http://169.254.169.254/latest/meta-data/network/interfaces/macs/${my_mac0}/subnet-id")"
my_security_group_ids="$(curl -sS "http://169.254.169.254/latest/meta-data/network/interfaces/macs/${my_mac0}/security-group-ids" | tr '\n' ',')"

nsX="peach"

instance_type="c5.2xlarge"
key_name="mario_demo"
security_group_ids="${my_security_group_ids}"
iam_instance_profile="Arn=arn:aws:iam::084075158741:instance-profile/${nsX}-web-instance-role"
#user_data="file://${userdata_file}"
ip="10.${my_classb}.2.9"
subnet_id="$my_subnet_id"
image_id="ami-6dfe5010"
count=1

eval "$(cli-shezargs $@)"

[[ -n $ns ]] && iam_instance_profile="Arn=arn:aws:iam::084075158741:instance-profile/${ns}-web-instance-role"

wait_for_start() {
  local start="$SECONDS"

  echo -n "wait for start |${1}| whoami"
  while ! sshix -o ConnectTimeout=5 ${1} whoami; do
    sleep 1
    echo -n '.'
  done

  echo " -- Starting took: $(($SECONDS - $start)) seconds"
  sleep 1
}

wait_for_ami() {
  local ami_state
  local old_ami_state="none"
  local image_id="$1"
  local state="$2"

  [[ -z $state ]] && state="available"

  local start="$SECONDS"

  ami_state="$(aws ec2 describe-images --image-ids "$image_id" | jq -r '.Images[0].State')"

  set +e
  while [[ $ami_state != $state ]]; do
    if [[ $ami_state != $old_ami_state ]]; then
      echo
      echo -n "$(date) |$image_id| |$old_ami_state| -> |$ami_state|"
    else
      echo -n '.'
    fi

    old_ami_state="$ami_state"
    sleep 1
    ami_state="$(aws ec2 describe-images --image-ids "$image_id" | jq -r '.Images[0].State')"
  done
  set -e

  echo " -- Getting $image_id to state $ami_state took: $(($SECONDS - $start)) seconds"
}


# Dump the ec2 params
aws_ec2() {
  #echoerr aws ec2 "$@"

  printf "aws ec2" 1>&2
  for x in "$@"; do
    printf " '%s'" "$x" 1>&2
  done
  printf '\n' 1>&2

  aws ec2 "$@"
}


# From: https://cloud-images.ubuntu.com/locator/ec2/
# N.Virginia -- Search with 'us-east hvm ebs-ssd amd64 lts'
#
# This list fetched 04/24/2018
#
# us-east-1  xenial   16.04 LTS  amd64  hvm:ebs-ssd  20180405  ami-6dfe5010  hvm
# us-east-1  trusty   14.04 LTS  amd64  hvm:ebs-ssd  20180404  ami-d8359ca5  hvm
# us-east-1  precise  12.04 LTS  amd64  hvm:ebs-ssd  20170502  ami-a04529b6  hvm

os_name="xenial"
agent_port="12345"
userdata_file="$(realpath ${scripts_dir}/data/userdata0)"

rm -f /tmp/run-instance-result.json

# ----- Determine the sub-ips -----
octets123="$(echo $ip | cut -d'.' -f1-3)"
octet4="$(echo $ip | cut -d'.' -f4)"

security_group_ids="$(echo $security_group_ids | tr ',' ' ')"

echo "===================================================================================="
echo " Launching instance"
echo "===================================================================================="

set +e

for octet4_offset in 0 1 2 3 4 5 6 7 8
do

  aws ec2 run-instances \
      --image-id                "$image_id" \
      --instance-type           "$instance_type" \
      --key-name                "$key_name" \
      --security-group-ids      $security_group_ids \
      --iam-instance-profile    "$iam_instance_profile" \
      --user-data               "file://${userdata_file}" \
      --private-ip-address      "${octets123}.$((${octet4} + ${octet4_offset}))" \
      --subnet-id               "$subnet_id" \
      --count                   1 \
        > /tmp/run-instance-result.json

  result="$?"
  echo $result
  [[ $result == 0 ]] && break

done

set -e

# Figure out what IP we ended up with
ip="$(cat /tmp/run-instance-result.json | jq -r '.Instances[].PrivateIpAddress')"
instance_id="$(cat /tmp/run-instance-result.json | jq -r '.Instances[].InstanceId')"

ip_for_filename="$(echo $ip | tr '.' '-')"
uniq_log_filename="/tmp/run-instance-result-${ip_for_filename}.json"
cp  "/tmp/run-instance-result.json" "$uniq_log_filename"



echo "===================================================================================="
echo " Bootstrapping $ip"
echo "===================================================================================="

wait_for_start $ip

${scripts_dir}/01-bootstrap --ip=$ip



echo "===================================================================================="
echo " Starting Listener to push scripts"
echo "===================================================================================="

# Start a agent server on the new instance (must do in bg)
echo sshix $ip "cd local/scripts && node agent.js --port=${agent_port} --ip=$ip --color=256"
sshix $ip "cd local/scripts && node agent.js --port=${agent_port} --ip=$ip --color=256" &

# Stall
sleep 5

#------------------------------------------------------------------------------------------------------------------------------------------------------------------

#skip_basic=1
if [[ -z $skip_basic ]]; then

  # ========================================================================================
  announce " Run basic script"
  # ========================================================================================

  # Send the script to setup the basics
  curl -sS "http://${ip}:${agent_port}/run/sh?label=basic" -F "script=@${scripts_dir}/on-instance/02-setup-instance-basics" > "/tmp/setup-instance-basics-${ip_for_filename}.json"
  cat "/tmp/setup-instance-basics-${ip_for_filename}.json" | jq '.' || true

fi

#------------------------------------------------------------------------------------------------------------------------------------------------------------------

#skip_nginx=1
if [[ -z $skip_nginx ]]; then

  # ========================================================================================
  announce " Run nginx setup script"
  # ========================================================================================

  # Send the script to setup Nginx
  curl -sS "http://${ip}:${agent_port}/run/sh?label=nginx" -F "nxscript=@${scripts_dir}/on-instance/03-build-nginx" > "/tmp/build-nginx-${ip_for_filename}.json"
  cat "/tmp/build-nginx-${ip_for_filename}.json" | jq '.' || true

  # copy some templates
  curl -sS "http://${ip}:${agent_port}/sudo/put/etc/nginx/rpxi?chown=root&chmod=640" -F "reverse-target-ssl-settings.conf=@${scripts_dir}/data/etc/nginx/rpxi/reverse-target-ssl-settings.conf"
  curl -sS "http://${ip}:${agent_port}/sudo/put/etc/nginx/rpxi?chown=root&chmod=640" -F "reverse-target-settings.conf=@${scripts_dir}/data/etc/nginx/rpxi/reverse-target-settings.conf"
  curl -sS "http://${ip}:${agent_port}/sudo/put/etc/nginx/rpxi?chown=root&chmod=640" -F "reverse-targets.conf=@${scripts_dir}/data/etc/nginx/rpxi/reverse-targets.conf"

fi

#------------------------------------------------------------------------------------------------------------------------------------------------------------------

#skip_devops=1
if [[ -z $skip_devops ]]; then

  # ========================================================================================
  announce " Run devops setup script"
  # ========================================================================================

  # Send the script to setup devops tools
  curl -sS "http://${ip}:${agent_port}/run/sh?label=devops" -F "nxscript=@${scripts_dir}/on-instance/04-setup-devops" > "/tmp/setup-devops-${ip_for_filename}.json"
  cat "/tmp/setup-devops-${ip_for_filename}.json" | jq '.' || true

fi

# The agent server is still running, so send it a signal to shutdown
curl -sS "http://${ip}:${agent_port}/exit" | jq '.'

wait


#------------------------------------------------------------------------------------------------------------------------------------------------------------------

#skip_finish_buildout=1
if [[ -z $skip_finish_buildout ]]; then

  # ========================================================================================
  announce " Finishing buildout"
  # ========================================================================================

  # Do one last apt update

  set +e
  sshix $ip "[[ -f /var/run/reboot-required ]] && sudo shutdown -r now"
  set -e

  # Wait for the reboot
  sleep 0.5
  wait_for_start $ip

  sshix $ip "sudo apt-get update && sudo apt-get upgrade -y && sudo apt-get dist-upgrade -y"

  set +e
  sshix $ip "[[ -f /var/run/reboot-required ]] && sudo shutdown -r now"
  set -e

  # Wait for the reboot
  sleep 0.5
  wait_for_start $ip

fi


#------------------------------------------------------------------------------------------------------------------------------------------------------------------

#skip_ami=1
if [[ -z $skip_ami ]]; then
  # ---------- Make a Snapshot ----------
  echo "===================================================================================="
  echo " Making a snapshot from $instance_id"
  echo "===================================================================================="

  dev_acct_num="$(echo $JSAWS_AWS_ACCTS | egrep -o 'dev:[0-9]+' | cut -d':' -f2)"
  prod_acct_num="$(echo $JSAWS_AWS_ACCTS | egrep -o 'pub:[0-9]+' | cut -d':' -f2)"

  # Figure out the build number
  rm -f /tmp/amis.json
  aws ec2 describe-images --owners "$dev_acct_num" > /tmp/amis.json
  build_num="$(cat /tmp/amis.json | jq -r '.Images[].Name' | egrep 'bridge47-base-' | cut -d- -f3 | sort -n | tail -1)"
  build_num="$(($build_num + 1))"

  ami_name="bridge47-base-${build_num}"


  # ---------- The create-image call ----------

  aws_ec2 create-image --description "$ami_name" --name "$ami_name" --reboot --instance-id "${instance_id}" > /tmp/ci.json
  image_id="$(cat /tmp/ci.json | jq -r '.ImageId')"

  # Wait for the image to be built
  wait_for_ami $image_id pending
  wait_for_start $ip
  wait_for_ami $image_id
  echo ""

  # Add launch permissions to the AMI and the snapshot, and tag both
  if [[ -n $prod_acct_num ]]; then
    aws_ec2 modify-image-attribute --image-id "$image_id" --launch-permission "{\"Add\": [{\"UserId\":\"${prod_acct_num}\"}]}"
    aws_ec2 create-tags --resources "$image_id" --tags "Key=Name,Value=$ami_name" "Key=os,Value=$os_name"

    snapshot_id="$(aws ec2 describe-images --image-ids "$image_id" | jq -r '.Images[0].BlockDeviceMappings[0].Ebs.SnapshotId')"
    if [[ -n $snapshot_id ]]; then
      aws_ec2 modify-snapshot-attribute --snapshot-id "$snapshot_id"  --attribute createVolumePermission --operation-type add --user-ids "${prod_acct_num}"
      aws_ec2 create-tags --resources "$snapshot_id" --tags "Key=imageId,Value=$image_id" "Key=imageName,Value=$ami_name"
      aws_ec2 create-tags --resources "$image_id"    --tags "Key=snapshotId,Value=$snapshot_id"
    fi
  fi

  # Update the configDb with the new AMI
  echo "Updating configDb with new AMI: ${image_id}"
  ra invoke "$(fnn ~/dev bridge47/lib/cluster-db\.js$)" updateRunConfigAmi --stack=dev --image-id=${image_id} | jq '.'

  #skip_termination=1
  if [[ -z $skip_termination ]]; then
    terminate-instances $ip
    terminated=1
  fi

  echo ""
  echo "New AMI built: $image_id"
  echo ""

else

  # We skipped making an AMI, which usually means that the instance should be left running, but not always
  #terminate=1
  if [[ -n $terminate ]];then
    terminate-instances $ip
    terminated=1
  fi
fi

#------------------------------------------------------------------------------------------------------------------------------------------------------------------

# ---------- Notes for the user ----------
if [[ -z $terminated ]]; then
  echo ""
  echo "To terminate instance:"
  echo "  aws ec2 terminate-instances --instance-ids $instance_id"
  echo "or:"
  echo "  terminate-instances $ip"
  echo ""
fi

#cat /tmp/run-instance-result.json | jq '.'
echo "Instance data is at $uniq_log_filename"
echo "  cat $uniq_log_filename | jq '.'"

if [[ -z $terminated ]]; then
  echo ""
  echo "  sshix $ip"
fi


