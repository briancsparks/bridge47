#!/bin/bash -e

#
# Launch an instance that does the basic bridge47 functionality:
#
# * Provides the world-facing instances that are hardened, fast and
#   have all the features you expect in a 2018 stack.
#
#
#
#
# run-instance --key-name="HQ" --security-group_ids="sg-85e1e9f1" --subnet-id="subnet-3644707d" --ip="10.91.0.250"
#
#

dev_acct_num="$(echo $JSAWS_AWS_ACCTS | egrep -o 'dev:[0-9]+' | cut -d':' -f2)"

my_mac0="$(curl -sS 'http://169.254.169.254/latest/meta-data/network/interfaces/macs/' | head -1)"
my_ip="$(curl -sS 'http://169.254.169.254/latest/meta-data/local-ipv4')"
my_classb="$(echo $my_ip | cut -d'.' -f2)"
my_subnet_id="$(curl -sS "http://169.254.169.254/latest/meta-data/network/interfaces/macs/${my_mac0}/subnet-id")"

nsX="$NAMESPACE"
[[ -z $nsX ]] && nsX="peach"
acctX="$dev_acct_num"

key_name="mario_demo"
security_group_ids="sg-915eb6e6"
user_data="file://${userdata_file}"
ip="10.${my_classb}.3.9"
subnet_id="$my_subnet_id"
count=1

# Determine the DB and util servers
[[ -n $SERVERASSIST_UTIL_HOSTNAME  ]] && util_ip="$SERVERASSIST_UTIL_HOSTNAME"
[[ -n $SERVERASSIST_UTIL_IP        ]] && util_ip="$SERVERASSIST_UTIL_IP"
[[ -n $SERVERASSIST_DB_HOSTNAME  ]]   &&   db_ip="$SERVERASSIST_DB_HOSTNAME"
[[ -n $SERVERASSIST_DB_IP        ]]   &&   db_ip="$SERVERASSIST_DB_IP"

eval "$(cli-shezargs $@)"

[[ -z $acct   ]] && acct="$acctX"
[[ -z $ns     ]] && ns="$nsX"

if [[ -z $iam_instance_profile ]]; then
  [[ -n $ns ]] && iam_instance_profile="Arn=arn:aws:iam::${acct}:instance-profile/${ns}-web-instance-role"
fi

wait_for_start() {
  local start="$SECONDS"

  echo -n "wait for start |${1}| whoami"
  while ! sshix -o ConnectTimeout=5 ${1} whoami; do
    sleep 1
    echo -n '.'
  done

  echo " -- Starting took: $(($SECONDS - $start)) seconds"
  sleep 1
}

# =========================================================================================
announce " Launching instance"
# =========================================================================================

rm -f /tmp/run-instance-result.json

# ----- Create a temp user-data file -----
userdata_src="$(realpath ${scripts_dir}/data/userdata1)"
userdata_file="$(mktemp)"

cat  $userdata_src | head -1   > $userdata_file
echo "export MCFLY=marty"     >> $userdata_file
tail -n +2 $userdata_src      >> $userdata_file

if [[ -n $ssh_443 ]]; then
  # TODO: you should add 443, and not remove 22
  echo "perl -pi -e 's/^#?Port 22$/Port 443/' /etc/ssh/sshd_config"     >> $userdata_file
  echo "service sshd restart || service ssh restart"                    >> $userdata_file
fi

# ----- Determine the sub-ips -----
octets123="$(echo $ip | cut -d'.' -f1-3)"
octet4="$(echo $ip | cut -d'.' -f4)"

security_group_ids="$(echo $security_group_ids | tr ',' ' ')"

# ---------- Fire up the new instance ----------

if [[ $stack == prod ]]; then
  assumed_acct="pub"
  use_profile="--profile=prod"
fi

[[ -z $stack    ]] && die "Need --stack="
[[ -z $tier     ]] && die "Need --tier="

[[ -n $instance_type  ]] && extraRiParams="${extraRiParams} --instance-type=${instance_type}"

rm -f /tmp/run-instance-result.json
ra invoke "$(fnn ~/dev 'bridge47/lib/ec2Instance\.js')" runInstances --name="peach-${stack}-${tier}" ${extraRiParams} > /tmp/run-instance-result.json

# The result JSON will be one line on error: '{}'
[[ $(cat /tmp/run-instance-result.json | jq . | wc -l) == 1 ]] && die


# Figure out what IP we ended up with
ip="$(cat /tmp/run-instance-result.json | jq -r '.Instances[].PrivateIpAddress')"
instance_id="$(cat /tmp/run-instance-result.json | jq -r '.Instances[].InstanceId')"
image_id="$(cat /tmp/run-instance-result.json | jq -r '.Instances[].ImageId')"
image_name="$(aws-assumed-role "$assumed_acct" ec2 describe-images --image-ids $image_id | jq -r '.Images[].Name')"

tech="bridge47"
if [[ $image_name =~ ^([^-]+)-(.*)$ ]]; then
  tech="${BASH_REMATCH[1]}"
  build_num="${BASH_REMATCH[2]}"
fi

echo "tech: ${tech}; build: ${build_num}; image-id: ${image_id}"

ip_for_filename="$(echo $ip | tr '.' '-')"
uniq_log_filename="/tmp/run-instance-result-${ip_for_filename}.json"
cp  "/tmp/run-instance-result.json" "$uniq_log_filename"

# Tell new instance its identity
env_color="${color}"
[[ -z ${env_color}  ]] && env_color="black"

aws-assumed-role "$assumed_acct" ec2 create-tags --resources "$instance_id" --tags "Key=tech,Value=${tech}"

[[ -n $ns           ]] && aws-assumed-role "$assumed_acct" ec2 create-tags --resources "$instance_id" --tags "Key=namespace,Value=${ns}"
[[ -n $env_color    ]] && aws-assumed-role "$assumed_acct" ec2 create-tags --resources "$instance_id" --tags "Key=color,Value=${env_color}"
[[ -n $tier         ]] && aws-assumed-role "$assumed_acct" ec2 create-tags --resources "$instance_id" --tags "Key=tier,Value=${tier}"
[[ -n $stack        ]] && aws-assumed-role "$assumed_acct" ec2 create-tags --resources "$instance_id" --tags "Key=stack,Value=${stack}"
[[ -n $build_num    ]] && aws-assumed-role "$assumed_acct" ec2 create-tags --resources "$instance_id" --tags "Key=build,Value=${build_num}"

wait_for_start $ip

# ---------- Once the instance is started, finalize it to work ----------

#agent_ip="$(curl 'http://169.254.169.254/latest/meta-data/local-ipv4')"

sshix $ip "local/scripts/01-bootstrap --setenv NAMESPACE $ns"
sshix $ip "local/scripts/01-bootstrap --setenv B47_COLOR ${env_color}"
sshix $ip "local/scripts/01-bootstrap --setenv B47_TIER  ${tier}"
sshix $ip "local/scripts/01-bootstrap --setenv B47_STACK ${stack}"

if [[ -n $db_ip ]]; then
  sshix $ip "local/scripts/01-bootstrap --setenv SERVERASSIST_DB_IP ${db_ip}"
  sshix $ip "local/scripts/01-bootstrap --setenv SERVERASSIST_DB_HOSTNAME ${db_ip}"
fi

if [[ -n $util_ip ]]; then
  sshix $ip "local/scripts/01-bootstrap --setenv SERVERASSIST_UTIL_IP ${util_ip}"
  sshix $ip "local/scripts/01-bootstrap --setenv SERVERASSIST_UTIL_HOSTNAME ${util_ip}"
fi

if [[ ${stack} == prod ]]; then
  sshix $ip "local/scripts/01-bootstrap --setenv NODE_ENV production"
fi

sshix $ip "cd ~/dev/bridge47 && git pull"

#push-changes-to $ip
if [[ -n $pause ]]; then
  echo "Instance $ip is up"
  echo " push-changes-to $ip"
  echo ""
  read -n 1 -s -r -p "        Press any key to continue"
  echo
fi

sshix $ip "cd ~/dev/bridge47 && npm install --production || true"
sshix $ip 'cd ~/dev/bridge47 && pm2 start bridge47.js --name agent -- agent --main --ip=$(curl -sS "http://169.254.169.254/latest/meta-data/local-ipv4")'

echo "Waiting to let instance start listening..."
sleep 5

# ---------- Fix /etc/hosts ----------
curl -sS "http://$ip:12340/etchosts?ip=${util_ip}&name=redis"
curl -sS "http://$ip:12340/etchosts?ip=${db_ip}&name=db"

# ----------- done -----------
echo ""
echo ""
echo " terminate-instances $use_profile $ip"
echo ""
echo "sshix $ip"


# Notes:

# 1. Build nginx conf files
# 2. Start the agent listener
# 3. Start the router
# 4. Signal that I am up
# 5. The master will push certs
# 6. Start nginx and be in business
#
# This command will cause the instance to listen for the FQDN, as the default server, and requiring
# client certificates. At startup, a list should be given.
#
# ra invoke lib/commands/configweb.js saveServerConfig --client-certs --default --fqdn=hq47.mobilewebassist.net
#
# * console.mobilewebassist.net.crt
# * console.mobilewebassist.net.key
# * console.mobilewebprint.net.crt
# * console.mobilewebprint.net.key
# * console.mobilewexprint.net.crt
# * console.mobilewexprint.net.key
# * hq.mobilewebassist.net.crt
# * hq.mobilewebassist.net.key
# *
# * mobilewebassist_root_client_ca.crt
# * mobilewebprint_root_client_ca.crt
# * mobilewexprint_root_client_ca.crt
#
# Then, the FQDN configs need to be scanned for certs they need. To this end, the confs have a built-in
# JSON object that can easily be found.
#
# cat /etc/nginx/sites-enabled/hq47.mobilewebassist.net.conf | egrep '# CONFIG_JSON ' | sed 's/^[^{[]*//g' | jq .
#
#
#
# Then those certs can be retrieved and un-encrypted:
#
# ra invoke  ../dev/bridge47/lib/crypto-kms.js decrypt --base=mobilewebprint_root_client_ca.crt
#
#
#
# Then, those certs can be put to the instance:
#
# curl -sS 'http://10.13.1.9:12340/sudo/put/etc/nginx/asdf?chmod=640&chown=root' -F 'cfg.json=@/home/scotty/stmp/hq.mobilewebassist.net.crt' | jq .
#
#
#
#
#
#
#

