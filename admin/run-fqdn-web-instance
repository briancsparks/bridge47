#!/bin/bash -e

# Default ot HTTPS, but no client certs

https=1

eval "$(cli-shezargs $@)"

ns="$NAMESPACE"

[[ -z $ns     ]] && die "Need --namespace="
[[ -z $stack  ]] && die "Need --stack="
[[ -z $fqdn   ]] && die "Need --fqdn="

${scripts_dir}/launch/run-instance --stack=${stack} --tier=web --fqdn=${fqdn} "$@"
cp /tmp/run-instance-result.json /tmp/run-fqdn-web-instance.json

ip="$(cat /tmp/run-instance-result.json | jq -r '.Instances[].PrivateIpAddress')"

# ---------- Configure nginx ----------

server_config_options="fqdn=${fqdn}&port=5779"

if [[ -n $client_certs   ]]; then
  server_config_options="${server_config_options}&client_certs=1"
  https=1
  cilent_certs_option=" --client-certs"
fi

[[ -n $https          ]] && server_config_options="${server_config_options}&https=1"

# Setup for the following FQDNs
curl -sS "http://$ip:12340/root-config"
curl -sS "http://$ip:12340/server-config?${server_config_options}"

# ---------- Get the nginx conf files ----------

# =======================================================================
# And push the needed certs
announce "Pushing certs to server"
# =======================================================================

# ----- An Arbitrary FQDN
curl -sS "http://$ip:12340/file/etc/nginx/sites-enabled/${fqdn}.conf" | egrep '# CONFIG_JSON ' | sed 's/^[^{[]*//g' > /tmp/config.json

push-cert-to-server "ssh_cert"      "$(cat /tmp/config.json | jq -r '.certfile')" "$ip"   || true
push-cert-to-server "ssh_key"       "$(cat /tmp/config.json | jq -r '.keyfile')" "$ip"    || true
push-cert-to-server "client_cert"   "$(cat /tmp/config.json | jq -r '.clientCert')" "$ip" || true

# ---------- Must assign the special FQDN ----------
${scripts_dir}/assign-fqdn --fqdn=${fqdn} --ip=${ip}


# Only start the server if the caller wants
if [[ -z $delay_finishing ]]; then
  ${scripts_dir}/run-final-web-instance-start-tasks --ip=${ip} --fqdn=${fqdn} "${cilent_certs_option}"
fi

echo "IP address is in /tmp/run-fqdn-web-instance.json"
echo ""
echo 'ip="$(cat /tmp/run-instance-result.json | jq -r '.Instances[].PrivateIpAddress')"'

